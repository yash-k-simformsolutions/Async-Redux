{"ast":null,"code":"var _jsxFileName = \"/home/yashkhorja/Yola_Yash/Async-Redux/async-redux/src/components/DisplayTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useTable } from 'react-table'; // import { fetchTodos } from '../redux/todosAction';\n\nimport { COLUMNS } from './column'; // import { connect } from 'react-redux';\n\nimport './DisplayTable.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DisplayTable() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () => {\n    const url = 'https://jsonplaceholder.typicode.com/todos';\n\n    try {\n      const response = await axios.get(url);\n      const responseData = await response.data;\n      setTodos(responseData);\n      console.log(\"Todos \", todos);\n    } catch (error) {\n      console.log(\"Error------>\", error);\n    }\n  };\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => todos, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n            children: cell.render('Cell')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n} // const mapStateToProps = state => {\n//     return{\n//         todosData: state.todo\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return{\n//         fetchTodos: () => dispatch(fetchTodos())\n//     }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(DisplayTable)\n\n\n_s(DisplayTable, \"Fs2q8/cBPZfl8ecOJ9Ri4Bbgm0I=\", false, function () {\n  return [useTable];\n});\n\n_c = DisplayTable;\nexport default DisplayTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTable\");","map":{"version":3,"sources":["/home/yashkhorja/Yola_Yash/Async-Redux/async-redux/src/components/DisplayTable.js"],"names":["React","useEffect","useMemo","useState","useTable","COLUMNS","axios","DisplayTable","todos","setTodos","fetchTodos","url","response","get","responseData","data","console","log","error","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SAASC,OAAT,QAAwB,UAAxB,C,CACA;;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,UAAU,GAAG,YAAY;AAC3B,UAAMC,GAAG,GAAG,4CAAZ;;AACA,QAAG;AACC,YAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUF,GAAV,CAAvB;AACA,YAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAApC;AACAN,MAAAA,QAAQ,CAACK,YAAD,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,KAAtB;AACH,KALD,CAKE,OAAOU,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,KAA5B;AACH;AACJ,GAVD;;AAYA,QAAMC,OAAO,GAAGjB,OAAO,CAAC,MAAMG,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMU,IAAI,GAAGb,OAAO,CAAC,MAAMM,KAAP,EAAc,EAAd,CAApB;AAEA,QAAMY,aAAa,GAAGhB,QAAQ,CAAC;AAAEe,IAAAA,OAAF;AAAWJ,IAAAA;AAAX,GAAD,CAA9B;AAEA,QAAM;AACFM,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA;AALE,MAMFL,aANJ;AAQA,sBACI,sBAAWC,aAAa,EAAxB;AAAA,4BACI;AAAA,gBAEQE,YAAY,CAACG,GAAb,CAAiBC,WAAW,iBACxB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBAEQD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,iBAC1B,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,oBAEQD,MAAM,CAACE,MAAP,CAAc,QAAd;AAFR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ,eAkBI,sBAAWV,iBAAiB,EAA5B;AAAA,gBAEQE,IAAI,CAACE,GAAL,CAASO,GAAG,IAAI;AACZR,QAAAA,UAAU,CAACQ,GAAD,CAAV;AACA,4BACI,mBAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,oBAEQD,GAAG,CAACE,KAAJ,CAAUT,GAAV,CAAcU,IAAI,iBACd,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,sBAEQD,IAAI,CAACJ,MAAL,CAAY,MAAZ;AAFR;AAAA;AAAA;AAAA;AAAA,kBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAaH,OAfD;AAFR;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyCH,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;GAvFSzB,Y;UAsBiBH,Q;;;KAtBjBG,Y;AAwFT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { useTable } from 'react-table';\n// import { fetchTodos } from '../redux/todosAction';\nimport { COLUMNS } from './column';\n// import { connect } from 'react-redux';\nimport './DisplayTable.css';\nimport axios from 'axios';\n\nfunction DisplayTable() {\n    const [todos, setTodos] = useState([]);\n\n    useEffect(() => {\n        fetchTodos()\n    }, [])\n\n    const fetchTodos = async () => {\n        const url = 'https://jsonplaceholder.typicode.com/todos';\n        try{\n            const response = await axios.get(url);\n            const responseData = await response.data;\n            setTodos(responseData)\n            console.log(\"Todos \", todos)\n        } catch (error) {\n            console.log(\"Error------>\", error)\n        }\n    }\n\n    const columns = useMemo(() => COLUMNS, []);\n    const data = useMemo(() => todos, []);\n\n    const tableInstance = useTable({ columns, data })\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = tableInstance\n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {\n                    headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {\n                                headerGroup.headers.map(column => (\n                                    <th {...column.getHeaderProps()}>\n                                        {\n                                            column.render('Header')\n                                        }\n                                    </th>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map(cell => (\n                                        <td {...cell.getCellProps()}>\n                                            {\n                                                cell.render('Cell')\n                                            }\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n        </table>\n    )\n}\n\n// const mapStateToProps = state => {\n//     return{\n//         todosData: state.todo\n//     }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//     return{\n//         fetchTodos: () => dispatch(fetchTodos())\n//     }\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(DisplayTable)\nexport default DisplayTable;\n"]},"metadata":{},"sourceType":"module"}